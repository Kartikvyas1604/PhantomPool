# PhantomPool Docker Compose Configuration
# Production-ready multi-service deployment with security and monitoring

version: '3.8'

services:
  # =============================================================================
  # PhantomPool Main Application
  # =============================================================================
  phantompool-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: phantompool-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - POSTGRES_HOST=phantompool-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=phantompool
      - POSTGRES_USER=phantompool
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-phantompool_secure_password}
      - REDIS_HOST=phantompool-cache
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_here}
      - API_KEY=${API_KEY:-your_api_key_here}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,https://phantompool.app}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-900000}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - ADMIN_RATE_LIMIT_MAX=${ADMIN_RATE_LIMIT_MAX:-10}
    volumes:
      - phantompool-logs:/app/logs
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      phantompool-db:
        condition: service_healthy
      phantompool-cache:
        condition: service_healthy
    networks:
      - phantompool-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # =============================================================================
  # PostgreSQL Database
  # =============================================================================
  phantompool-db:
    image: postgres:15-alpine
    container_name: phantompool-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=phantompool
      - POSTGRES_USER=phantompool
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-phantompool_secure_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - phantompool-db-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - phantompool-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U phantompool -d phantompool"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /run/postgresql:noexec,nosuid,size=100m

  # =============================================================================
  # Redis Cache
  # =============================================================================
  phantompool-cache:
    image: redis:7-alpine
    container_name: phantompool-cache
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - phantompool-cache-data:/data
    ports:
      - "6379:6379"
    networks:
      - phantompool-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m

  # =============================================================================
  # Nginx Reverse Proxy
  # =============================================================================
  phantompool-proxy:
    image: nginx:alpine
    container_name: phantompool-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - phantompool-logs:/var/log/nginx
    depends_on:
      - phantompool-app
    networks:
      - phantompool-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Monitoring Stack - Prometheus
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: phantompool-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - phantompool-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - phantompool-network
    security_opt:
      - no-new-privileges:true

  # =============================================================================
  # Monitoring Stack - Grafana
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: phantompool-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - phantompool-grafana-data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    networks:
      - phantompool-network
    security_opt:
      - no-new-privileges:true

# =============================================================================
# Networks
# =============================================================================
networks:
  phantompool-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  phantompool-db-data:
    driver: local
  phantompool-cache-data:
    driver: local
  phantompool-logs:
    driver: local
  phantompool-prometheus-data:
    driver: local
  phantompool-grafana-data:
    driver: local